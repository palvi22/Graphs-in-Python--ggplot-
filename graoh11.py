import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
#Table 1.1
## Data input as lists for each year and age group which will list the the week 
weeks = list(range(1, 22))
week_ending_dates = ['7-Jan-24', '14-Jan-24', '21-Jan-24', '28-Jan-24', '4-Feb-24', '11-Feb-24', '18-Feb-24', 
                     '25-Feb-24', '3-Mar-24', '10-Mar-24', '17-Mar-24', '24-Mar-24', '31-Mar-24', '7-Apr-24', 
                     '14-Apr-24', '21-Apr-24', '28-Apr-24', '5-May-24', '12-May-24', '19-May-24', '26-May-24']

# Rates for each age group in 2024
age_0_44_2024 = [1.092, 0.937, 0.887, 1.110, 0.893, 0.930, 0.949, 0.961, 1.110, 0.899, 0.980, 1.017, 0.868, 1.053, 1.010, 0.825, 0.881, 0.838, 0.641, 0.825, 0.838]
age_45_64_2024 = [6.169, 5.902, 6.404, 6.812, 6.059, 6.231, 7.063, 6.765, 6.263, 7.236, 6.420, 5.855, 6.451, 6.565, 6.486, 6.079, 6.675, 6.283, 6.157, 6.643, 6.345]
age_65_74_2024 = [21.993, 20.802, 20.961, 20.167, 22.271, 21.874, 20.643, 20.286, 19.968, 21.715, 20.246, 19.611, 20.008, 21.184, 21.658, 20.709, 19.800, 20.709, 22.409, 20.512, 21.263]
age_75_84_2024 = [59.643, 61.937, 57.095, 61.428, 57.158, 55.247, 57.541, 59.197, 55.693, 58.879, 59.962, 58.178, 59.070, 58.319, 59.391, 57.121, 59.391, 63.048, 58.193, 61.220, 67.398]
age_85_plus_2024 = [239.778, 237.006, 236.659, 234.754, 220.894, 235.793, 232.155, 229.036, 228.690, 238.912, 234.407, 224.532, 243.763, 236.182, 236.872, 242.733, 233.769, 247.733, 250.491, 256.870, 277.385]
all_ages_2024 = [12.677, 12.486, 12.302, 12.666, 12.014, 12.246, 12.394, 12.327, 12.059, 12.725, 12.412, 11.930, 12.478, 12.524, 12.601, 12.301, 12.330, 12.806, 12.594, 12.953, 13.754]

# Rates for 2023 and 2022 (same format as above for simplicity)
age_0_44_2023 = [1.016, 0.844, 0.901, 1.004, 1.144, 0.876, 1.055, 0.933, 0.920, 0.946, 0.997, 0.952, 1.029, 1.098, 0.927, 0.946, 0.882, 0.774, 0.952, 0.870, 0.978]
age_45_64_2023 = [6.306, 6.085, 6.022, 6.828, 6.448, 5.927, 6.496, 6.796, 6.527, 6.401, 6.543, 6.464, 6.211, 6.912, 6.328, 6.596, 6.170, 6.217, 7.259, 7.243, 6.738]
age_65_74_2023 = [22.632, 20.692, 21.622, 21.015, 20.248, 19.641, 21.702, 20.207, 20.692, 21.137, 21.702, 21.743, 20.005, 19.648, 21.500, 22.466, 22.950, 21.500, 23.996, 24.399, 21.701]
age_75_84_2023 = [63.385, 60.443, 62.048, 56.565, 61.513, 61.379, 60.577, 60.844, 62.382, 64.655, 62.850, 62.516, 60.711, 59.283, 64.961, 64.631, 65.753, 66.017, 65.489, 67.337, 74.071]
age_85_plus_2023 = [255.238, 241.795, 240.182, 227.276, 243.408, 231.578, 228.531, 223.692, 231.937, 238.569, 244.483, 231.040, 240.361, 227.846, 251.201, 254.232, 249.953, 263.681, 279.905, 282.044, 283.114]
all_ages_2023 = [13.170, 12.385, 12.547, 12.162, 12.702, 12.105, 12.430, 12.204, 12.438, 12.732, 12.871, 12.528, 12.445, 12.289, 13.036, 13.246, 13.126, 13.243, 14.139, 14.275, 14.372]

age_0_44_2022 = [1.131, 1.052, 0.993, 0.914, 1.157, 0.894, 0.960, 0.953, 0.993, 1.059, 1.006, 1.072, 1.118, 0.929, 1.119, 0.897, 0.982, 1.054, 1.047, 0.923, 0.956]
age_45_64_2022 = [7.054, 7.689, 7.292, 6.815, 7.070, 6.831, 6.768, 6.784, 6.561, 6.672, 7.038, 6.593, 6.656, 6.568, 6.504, 6.187, 6.727, 7.250, 7.853, 6.457, 7.266]
age_65_74_2022 = [21.461, 23.346, 23.427, 23.427, 26.581, 22.608, 22.403, 21.830, 23.100, 20.438, 22.199, 22.117, 22.035, 21.815, 20.712, 20.099, 21.611, 24.021, 24.920, 22.714, 23.041]
age_75_84_2022 = [62.429, 69.413, 76.467, 73.363, 66.732, 66.450, 70.259, 64.052, 66.591, 57.844, 62.217, 64.828, 68.637, 65.146, 62.225, 69.595, 65.285, 67.231, 69.387, 66.499, 73.054]
age_85_plus_2022 = [239.938, 251.608, 260.731, 275.580, 252.726, 240.758, 248.726, 241.670, 248.993, 228.285, 250.184, 252.018, 258.681, 257.385, 253.771, 247.101, 264.289, 269.108, 273.598, 277.499, 277.085]
all_ages_2022 = [13.144, 13.972, 14.296, 14.515, 13.629, 13.226, 13.503, 12.949, 13.532, 12.627, 13.493, 13.449, 13.821, 13.482, 13.385, 13.788, 13.779, 14.041, 14.408, 13.922, 14.652]

# Create DataFrames for each year
data_2022 = pd.DataFrame({
    'Week Number': weeks,
    'Week Ending Date': week_ending_dates,
    '0-44': age_0_44_2022,
    '45-64': age_45_64_2022,
    '65-74': age_65_74_2022,
    '75-84': age_75_84_2022,
    '85+': age_85_plus_2022,
    'All Ages': all_ages_2022
})

data_2023 = pd.DataFrame({
    'Week Number': weeks,
    'Week Ending Date': week_ending_dates,
    '0-44': age_0_44_2023,
    '45-64': age_45_64_2023,
    '65-74': age_65_74_2023,
    '75-84': age_75_84_2023,
    '85+': age_85_plus_2023,
    'All Ages': all_ages_2023
})

data_2024 = pd.DataFrame({
    'Week Number': weeks,
    'Week Ending Date': week_ending_dates,
    '0-44': age_0_44_2024,
    '45-64': age_45_64_2024,
    '65-74': age_65_74_2024,
    '75-84': age_75_84_2024,
    '85+': age_85_plus_2024,
    'All Ages': all_ages_2024
})

# Plotting function to create a single graph for all age groups
def plot_combined_bar_graph(data_2022, data_2023, data_2024):
    width = 0.15  # Reduced width of the bars
    ind = np.arange(len(weeks))  # X locations for the groups
 
    # Create bar plots for each year side by side
    #creates a new figure for the plot with a size of 12 inches wide and 6 inches tall
    # Create a figure for the combined graph
    plt.figure(figsize=(16, 8))

    # Plot bars for each age group and each year
    age_groups = ['0-44', '45-64', '65-74', '75-84', '85+', 'All Ages']
    age_labels = ['0-44', '45-64', '65-74', '75-84', '85+', 'All Ages']
    
    for i, age_group in enumerate(age_groups):
        # Offset each group slightly on the x-axis
        #alpha for adding transperancy
        plt.bar(ind + i * width - width * (len(age_groups) / 2), data_2022[age_group], width, label=f'2022 {age_labels[i]}')
        plt.bar(ind + i * width - width * (len(age_groups) / 2), data_2023[age_group], width, label=f'2023 {age_labels[i]}', alpha=0.75)
        plt.bar(ind + i * width - width * (len(age_groups) / 2), data_2024[age_group], width, label=f'2024 {age_labels[i]}', alpha=0.6)

    # Add title and labels
    plt.title('Rates Across Age Groups and Years (2022, 2023, 2024)', fontsize=14)
    plt.xlabel('Week Number', fontsize=12)
    plt.ylabel('Rate', fontsize=12)
    plt.xticks(ind, weeks)
    plt.legend(loc='best', ncol=2)  # Adjust legend location and format
    plt.grid(True)

    # Show plot
    plt.tight_layout()
    plt.show()

# Call the function to plot
plot_combined_bar_graph(data_2022, data_2023, data_2024)
